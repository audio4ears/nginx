#!/usr/bin/env bash

#------------------------------------------------------------------------------
# FUNCTIONS
#------------------------------------------------------------------------------

function svc_ctrl () {
  if [ -f /etc/redhat-release ]; then
    # get platform version
    REDHAT_RELEASE=$(grep -Eo "[0-9.]+" /etc/redhat-release \
      | awk -F. '{print $1}');
    # signal service
    if [ "${REDHAT_RELEASE}" -ge "7" ]; then
      service $2 $1; 
    else
      systemctl $1 $2;
    fi
  else
    echo "==> ERROR: Unsupported operating system";
    exit 1;
  fi
}

function usage () {
  cat << EOF
  Usage: $0 -(i|u)

    -i        install nginx from source [default]
    -u        uninstall nginx
    -v        install specific nginx version [default: 1.8.0]

EOF
}

#------------------------------------------------------------------------------
# ARGUEMENTS
#------------------------------------------------------------------------------

while getopts :iuv: FLAG; do
  case $FLAG in
    i|install)
      cmd='install';
      ;;
    u|uninstall)
      cmd='uninstall';
      ;;
    v|version)
      ver=$OPTARG;
      ;;
    *)
      usage;
      exit 0;
      ;;
  esac
done
shift $((OPTIND-1))  #This tells getopts to move on to the next argument.

#------------------------------------------------------------------------------
# VARIABLES
#------------------------------------------------------------------------------

NGINX_DEFAULT='1.8.0';
NGINX_PREFIX='/etc/nginx';
SRC_DIR='/usr/local/src';
HOME=`dirname $(realpath $0)`;

#------------------------------------------------------------------------------
# MAIN
#------------------------------------------------------------------------------

# verify os
if [ -f /etc/redhat-release ]; then
  REDHAT_RELEASE=$(grep -Eo "[0-9.]+" /etc/redhat-release \
    | awk -F. '{print $1}');
else
  echo "==> ERROR: Unsupported operating system";
  exit 1;
fi

# set nginx release
if [ ! -z ${ver} ]; then
  NGINX_RELEASE=${ver};
else
  NGINX_RELEASE=${NGINX_DEFAULT};
fi

# default install nginx
if [ -z ${cmd} ]; then
  cmd='install';
fi

# nginx app install/uninstall
case ${cmd} in
  install)
    # check for existing installation
    if [ -f ${NGINX_PREFIX}/* ]; then
      echo "==> ERROR: Existing nginx installation found at ${NGINX_PREFIX}";
      exit 1;
    fi
    # install prerequsites
    echo "==> Installing Prerequsites";
    yum update -y && yum clean all;
    yum install -y bc curl gcc gcc-c++ make openssl-devel pcre pcre-devel \
      perl tar wget zlib-devel;
    # create nginx user
    echo "==> Creating nginx user";
    useradd nginx -U -M -d / -c 'nginx service user' -s /sbin/nologin;
    # install nginx
    echo "==> Installing Nginx";
    mkdir -p "${SRC_DIR}/nginx";
    curl "http://nginx.org/download/nginx-${NGINX_RELEASE}.tar.gz" \
      | tar -xvz -C "${SRC_DIR}/nginx";
    mkdir -p "${NGINX_PREFIX}";
    pushd "${SRC_DIR}/nginx/nginx-${NGINX_RELEASE}";
    ./configure \
      --prefix=${NGINX_PREFIX} \
      --sbin-path=/usr/sbin/nginx \
      --conf-path=/etc/nginx/nginx.conf \
      --error-log-path=/var/log/nginx/error.log \
      --http-log-path=/var/log/nginx/access.log \
      --pid-path=/var/run/nginx.pid \
      --lock-path=/var/run/nginx.lock \
      --user=nginx \
      --group=nginx \
      --with-pcre \
      --with-http_ssl_module \
      --with-http_realip_module \
      --with-http_gzip_static_module \
      --with-http_stub_status_module;
    make && make install;
    popd;
    # replace default nginx conf
    echo "==> Configuring Nginx";
    mkdir -p "${NGINX_PREFIX}/defaults";
    mv ${NGINX_PREFIX}/*.default ${NGINX_PREFIX}/defaults;
    mv ${NGINX_PREFIX}/nginx.conf ${NGINX_PREFIX}/defaults;
    cp ${HOME}/nginx/{nginx.conf,authorized_ip,http_realip} ${NGINX_PREFIX}/;
    mkdir -p ${NGINX_PREFIX}/sites-{enabled,available};
    cp ${HOME}/nginx/sites-available/* ${NGINX_PREFIX}/sites-available;
    ln -s ${NGINX_PREFIX}/sites-available/hello_world.conf ${NGINX_PREFIX}/sites-enabled/hello_world.conf;
    # add service handling
    echo "==> Configuring Nginx service";
    if [ "${REDHAT_RELEASE}" -ge "7" ]; then
      # redhat release < 7.0
      cp ${HOME}/service/nginx.init.d /etc/init.d/nginx;
      chmod 755 /etc/init.d/nginx;
      chown root:root /etc/init.d/nginx;
      chkconfig nginx on;
    else
      # redhat release >= 7.0
      cp ${HOME}/service/nginx.systemd /lib/systemd/system/nginx.service;
      chmod 644 /lib/systemd/system/nginx.service;
      chown root:root /lib/systemd/system/nginx.service;
      systemctl daemon-reload;
      systemctl enable nginx;
    fi
    svc_ctrl start nginx;
    # add logrotate settings
    cp ${HOME}/logrotate/nginx.logrotate /etc/logrotate.d/nginx;
    # status
    echo '==> OK: nginx has been installed';
    ;;
  uninstall)
    # uninstall nginx
    svc_ctrl stop nginx;
    if [ "${REDHAT_RELEASE}" -ge "7" ]; then
      # redhat release < 7.0
      chkconfig nginx off;
      rm -f /etc/init.d/nginx;
    else
      # redhat release >= 7.0
      systemctl disable nginx;
      rm -f /lib/systemd/system/nginx.service;
      systemctl daemon-reload;
    fi
    rm -rf ${SRC_DIR}/nginx;
    rm -rf ${NGINX_PREFIX};
    rm -f /sbin/nginx;
    rm -f /usr/sbin/nginx;
    rm -rf /var/log/nginx;
    rm -f /var/run/nginx.pid;
    rm -f /var/run/nginx.lock; 
    # status
    echo 'OK: nginx has been uninstalled';
    ;;
esac
